/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/bacass Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                           = null

    // QC and trimming options
    save_trimmed_fail               = false
    save_merged                     = false

    // Contamination_screening
    kraken2db                       = ""

    // Assembly parameters
    assembler                       = 'unicycler'   // Allowed: ['unicycler', 'canu', 'miniasm', 'dragonflye']
    assembly_type                   = 'short'       // Allowed: ['short', 'long', 'hybrid'] (hybrid works only with Unicycler)
    unicycler_args                  = ""
    canu_mode                       = '-nanopore'   // Allowed: ['-pacbio', '-nanopore', '-pacbio-hifi']
    canu_args                       = ''            // Default no extra options, can be adjusted by the user
    dragonflye_args                 = ''

    // Assembly polishing
    polish_method                   = 'medaka'      // Allowed: ['medaka', 'nanopolish']

    // Annotation
    annotation_tool                 = 'prokka'      // Allowed: ['prokka', 'bakta','dfast']
    prokka_args                     = ""
    baktadb                         = ''
    baktadb_download                = false
    baktadb_download_args           = '--type light' // Allowed: ['--type light', '--type full']
    dfast_config                    = "https://raw.githubusercontent.com/nf-core/bacass/master/assets/test_config_dfast.py"

    // Skipping options
    skip_fastqc                     = false
    skip_fastp                      = false
    skip_kraken2                    = true
    skip_pycoqc                     = false
    skip_annotation                 = false
    skip_polish                     = false
    skip_multiqc                    = false

    // MultiQC options
    multiqc_config                  = null
    multiqc_title                   = null
    multiqc_logo                    = null
    max_multiqc_email_size          = '25.MB'
    multiqc_methods_description     = null

    // Boilerplate options
    outdir                          = null
    publish_dir_mode                = 'copy'
    email                           = null
    email_on_fail                   = null
    plaintext_email                 = false
    monochrome_logs                 = false
    hook_url                        = null
    help                            = false
    validate_params                 = true
    schema_ignore_params            = 'modules,igenomes_base'
    version                         = false

    // Config options
    config_profile_name             = null
    config_profile_description      = null
    custom_config_version           = 'master'
    custom_config_base              = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact          = null
    config_profile_url              = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                      = '128.GB'
    max_cpus                        = 16
    max_time                        = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams= false
    validationLenientMode           = false
    validationSchemaIgnoreParams    = 'genomes'
    validationShowHiddenParams      = false
    validate_params                 = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/bacass custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific institutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/bacass.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/bacass profiles: ${params.custom_config_base}/pipeline/bacass.config")
// }
profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }


    // keep stub conda profile to prevent unknown profile warning so users get a better error
    conda {
        conda.enabled = true
    }

    // Using AWS batch.
    // May need to set aws.region and aws.batch.cliPath
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:wf_common {
                container = "${params.aws_image_prefix}-wf-common:${params.wf.common_sha}"
            }
            withLabel:wftemplate {
                container = "${params.aws_image_prefix}-wf-common:${params.wf.common_sha}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}


// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell       = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/bacass'
    author          = """Andreas Wilm, Alexander Peltzer"""
    homePage        = 'https://github.com/nf-core/bacass'
    description     = """Simple bacterial assembly and annotation"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '2.2.0'
    doi             = '10.5281/zenodo.2669428'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}